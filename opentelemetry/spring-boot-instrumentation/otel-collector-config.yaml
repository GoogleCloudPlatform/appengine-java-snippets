# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

receivers:
  # Receive OTLP from our application
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
  # Use the filelog receiver to read our log from its log file.
  filelog:
    start_at: beginning
    include:
    - "/var/log/app.log"
    operators:
      - type: json_parser
        parse_to: body
        # Parse the timestamp from the "time" field
        timestamp:
          parse_from: body.timestamp
          layout_type: epoch
          layout: ms
        # Parse the severity from the "level" field
        severity:
          parse_from: body.level
      # Parse trace_id, span_id, and trace_flags into the log's span context
      - type: trace_parser
        trace_id:
          parse_from: body.mdc.trace_id
        span_id:
          parse_from: body.mdc.span_id
        trace_flags:
          parse_from: body.mdc.trace_flags
      # Remove fields that we have translated above.
      - type: remove
        field: body.mdc
      - type: remove
        field: body.level
      - type: remove
        field: body.timestamp

exporters:
  # Export logs and traces using the standard googelcloud exporter
  googlecloud:
    project: $GOOGLE_CLOUD_PROJECT
    # Needed when using Application Default Credentials in Cloud Shell to call Cloud Trace
    destination_project_quota: true
    log:
      default_log_name: "opentelemetry.io/collector-exported-log"
  # Export metrics to Google Managed service for Prometheus
  googlemanagedprometheus:
    project: $GOOGLE_CLOUD_PROJECT

processors:
  # Batch telemetry together to more efficiently send to GCP
  batch:
    send_batch_max_size: 500
    send_batch_size: 500
    timeout: 1s
  # Make sure Google Managed service for Prometheus required labels are set
  resource:
    attributes:
      - { key: "location", value: "us-central1", action: "upsert" }
      - { key: "cluster", value: "no-cluster", action: "upsert" }
      - { key: "namespace", value: "no-namespace", action: "upsert" }
      - { key: "job", value: "us-job", action: "upsert" }
      - { key: "instance", value: "us-instance", action: "upsert" }
  # If running on GCP (e.g. on GKE), detect resource attributes from the environment.
  resourcedetection:
    detectors: ["env", "gcp"]

service:
  pipelines:
    traces:
      receivers: ["otlp"]
      processors: ["batch", "resourcedetection"]
      exporters: ["googlecloud"]
    metrics:
      receivers: ["otlp"]
      processors: ["batch", "resourcedetection", "resource"]
      exporters: ["googlemanagedprometheus"]
    logs:
      receivers: ["filelog"]
      processors: ["batch", "resourcedetection"]
      exporters: ["googlecloud"]
